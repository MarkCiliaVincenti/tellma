using BSharp.Services.SqlLocalization;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection.Extensions;
using Microsoft.Extensions.Localization;
using System;

namespace Microsoft.Extensions.DependencyInjection
{
    public static class LocalizationServiceCollectionExtensions
    {
        public static IServiceCollection AddLocalization(this IServiceCollection services, IConfiguration configSection)
        {
            // TODO: Implement good old IStringLocalizer
            if (services == null)
            {
                throw new ArgumentNullException(nameof(services));
            }

            var options = configSection?.Get<LocalizationOptions>();

            if(configSection != null)
            {
                services.Configure<SqlLocalizationConfiguration>(configSection);
            }

            // Register our custom SqlStringLocalizerFactory
            services.AddSingleton<ISqlStringLocalizerFactory, SqlStringLocalizerFactory>();
            services.AddSingleton<IStringLocalizerFactory>(e => e.GetRequiredService<ISqlStringLocalizerFactory>());


            // The default IStringLocalizer implementation from Microsoft is a simple wrapper around the IStringLocalizer 
            // that is generated by whichever implementation of IStringLocalizerFactory that is registered in the DI container
            // the default factory produces localizers that rely on the resource manager, however we override this with our own
            // factory implementation above: SqlStringLocalizerFactory, more can be learnt be exploring the GitHub repo:
            // https://github.com/aspnet/Localization
           // services.AddLocalization();

            return services;
        }

    }
}
