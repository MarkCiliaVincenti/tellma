// <auto-generated />
using BSharp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BSharp.Data.Migrations.Sharding
{
    [DbContext(typeof(ShardingContext))]
    [Migration("20181125210108_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BSharp.Data.Model.Sharding.Shard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConnectionString")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Shards");

                    b.HasData(
                        new { Id = 1, ConnectionString = "<ShardManager>", Name = "Shard Manager" }
                    );
                });

            modelBuilder.Entity("BSharp.Data.Model.Sharding.Tenant", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name");

                    b.Property<int>("ShardId");

                    b.HasKey("Id");

                    b.HasIndex("ShardId");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("BSharp.Data.Model.Sharding.Tenant", b =>
                {
                    b.HasOne("BSharp.Data.Model.Sharding.Shard", "Shard")
                        .WithMany()
                        .HasForeignKey("ShardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
